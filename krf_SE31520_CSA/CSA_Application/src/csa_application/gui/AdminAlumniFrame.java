/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csa_application.gui;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import csa_application.data.Broadcast;
import csa_application.data.RestletUtility;
import csa_application.data.User;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.restlet.data.MediaType;
import org.restlet.resource.ClientResource;

/**
 *
 * @author Kit
 */
public class AdminAlumniFrame extends javax.swing.JFrame {

    private final String BASIC_URI = "http://localhost:3000";
    User currentUser;
    private ClientResource cr;
    private ArrayList<User> userArray;
    private ArrayList<Broadcast> broadcastArray;
    private RestletUtility ru;

    /**
     * Creates new form AlumniFrame
     * @param userName
     * @param cr
     */
    public AdminAlumniFrame(ClientResource cr) {
        this.cr = cr;
        ru = new RestletUtility();
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);

        collectUsers();
        collectBroadcasts();
        collectUser();
    }

    private void collectUser() {

        try {
            cr.setReference(BASIC_URI + "/users/" + broadcastArray.get(0).getUserId());
            String jsonText = cr.get(MediaType.APPLICATION_JSON).getText();
            JsonElement jelement = new JsonParser().parse(jsonText);
            JsonObject jo = jelement.getAsJsonObject();
            currentUser = new User();
            currentUser.setSurname(jo.get("surname").getAsString());
            currentUser.setFirstName(jo.get("firstname").getAsString());
            currentUser.setPhone(jo.get("phone").getAsString());
            currentUser.setGrad_year(jo.get("grad_year").getAsInt());
            currentUser.setEmail(jo.get("email").getAsString());
            currentUser.setJobs(jo.get("jobs").getAsBoolean());
            currentUser.setUrl(cr.getReference().toString() + ".json");
        } catch (IOException ex) {
            Logger.getLogger(AdminAlumniFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultListModel list = new DefaultListModel();
        list.addElement("Name : " + currentUser.getFirstName() + " " + currentUser.getSurname());
        list.addElement("Phone : " + currentUser.getPhone());
        list.addElement("Grad. Year : " + currentUser.getGrad_year());
        list.addElement("Email : " + currentUser.getEmail());
        list.addElement("Jobs : " + currentUser.getJobs());

        profileList.setModel(list);
    }

    private void collectUsers() {
        userArray = ru.connectUsers(cr, BASIC_URI);
        String[] cols = {"Surname", "First Name", "Phone", "Email", "Grad. Year", "Jobs"};
        DefaultTableModel table = new DefaultTableModel(cols, 0);
        for (User tempUser : userArray) {
            Object[] row = {tempUser.getSurname(), tempUser.getFirstName(), tempUser.getPhone(), tempUser.getEmail(), tempUser.getGrad_year(), tempUser.getJobs()};
            table.addRow(row);
        }
        userTable.setModel(table);
    }

    private void collectBroadcasts() {
        broadcastArray = ru.connectBroadcasts(cr, BASIC_URI);
        String[] cols = {"Content", "User_ID"};
        DefaultTableModel table = new DefaultTableModel(cols, 0);
        for (Broadcast tempBroadcast : broadcastArray) {
            Object[] row = {tempBroadcast.getContent(), tempBroadcast.getUserId()};
            table.addRow(row);
        }
        broadcastTable.setModel(table);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adminTabs = new javax.swing.JTabbedPane();
        userTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        newButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        broadcastTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        broadcastTable = new javax.swing.JTable();
        newBButton = new javax.swing.JButton();
        deleteBButton = new javax.swing.JButton();
        profileTab = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        profileList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CS-Alumni");

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Surname", "Name", "Email", "Phone", "Grad. Year", "Jobs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userTable);

        newButton.setText("New User");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit User");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete User");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userTabLayout = new javax.swing.GroupLayout(userTab);
        userTab.setLayout(userTabLayout);
        userTabLayout.setHorizontalGroup(
            userTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userTabLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        userTabLayout.setVerticalGroup(
            userTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
            .addGroup(userTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newButton)
                .addGap(18, 18, 18)
                .addComponent(editButton)
                .addGap(18, 18, 18)
                .addComponent(deleteButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        adminTabs.addTab("Users", userTab);

        broadcastTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Content", "User ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(broadcastTable);

        newBButton.setText("New Broadcast");
        newBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBButtonActionPerformed(evt);
            }
        });

        deleteBButton.setText("Delete Broadcast");
        deleteBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout broadcastTabLayout = new javax.swing.GroupLayout(broadcastTab);
        broadcastTab.setLayout(broadcastTabLayout);
        broadcastTabLayout.setHorizontalGroup(
            broadcastTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(broadcastTabLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(broadcastTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newBButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        broadcastTabLayout.setVerticalGroup(
            broadcastTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
            .addGroup(broadcastTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newBButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteBButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        adminTabs.addTab("Broadcasts", broadcastTab);

        profileList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Surname", "Name", "Grad. Year", "Phone", "Email", "Jobs" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(profileList);

        javax.swing.GroupLayout profileTabLayout = new javax.swing.GroupLayout(profileTab);
        profileTab.setLayout(profileTabLayout);
        profileTabLayout.setHorizontalGroup(
            profileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addContainerGap())
        );
        profileTabLayout.setVerticalGroup(
            profileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        adminTabs.addTab("Profile", profileTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminTabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminTabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        User temp = new User();
        String tempLogin = "";
        String tempPassword = "";
        UserPanel panel = new UserPanel();
        int result = JOptionPane.showConfirmDialog(null, panel,
                "Please Enter User Details", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            temp.setSurname(panel.getSurnameField().getText());
            temp.setFirstName(panel.getNameField().getText());
            temp.setGrad_year(panel.getYearField().getItemAt(panel.getYearField().getSelectedIndex()));
            temp.setPhone(panel.getPhoneField().getText());
            temp.setEmail(panel.getEmailField().getText());
            temp.setJobs(panel.getJobsField().isSelected());
            tempLogin = panel.getLoginField().getText();
            tempPassword = panel.getPasswordField().getText();
            int jobInt = (temp.getJobs()) ? 1 : 0;
            ru.newUser(tempLogin, tempPassword, temp, jobInt, cr, BASIC_URI);
            collectUsers();
        }
    }//GEN-LAST:event_newButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if (userTable.getSelectedRow() != -1) {
            User temp = userArray.get(userTable.getSelectedRow());
            EditUserPanel panel = new EditUserPanel();
            panel.getSurnameField().setText(temp.getSurname());
            panel.getPhoneField().setText(temp.getPhone());
            panel.getNameField().setText(temp.getFirstName());
            panel.getEmailField().setText(temp.getEmail());
            panel.getJobsField().setSelected(temp.getJobs());
            panel.getYearField().setSelectedItem(temp.getGrad_year());
            int result = JOptionPane.showConfirmDialog(null, panel,
                    "Please Enter User Details", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                temp.setSurname(panel.getSurnameField().getText());
                temp.setFirstName(panel.getNameField().getText());
                temp.setGrad_year(panel.getYearField().getItemAt(panel.getYearField().getSelectedIndex()));
                temp.setPhone(panel.getPhoneField().getText());
                temp.setEmail(panel.getEmailField().getText());
                temp.setJobs(panel.getJobsField().isSelected());
                int jobInt = (temp.getJobs()) ? 1 : 0;

                ru.editUser(temp, jobInt, cr, BASIC_URI);
                
                collectUsers();
                collectUser();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No User Selected To Edit");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        if (userTable.getSelectedRow() != -1) {
            User temp = userArray.get(userTable.getSelectedRow());
            if (temp.getUrl().equals(currentUser.getUrl())) {
                JOptionPane.showMessageDialog(null, "Cannot Delete Current User");
            } else {
                int result = JOptionPane.showConfirmDialog(null, "Are you sure you wish to delete this user?", "Delete User?", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    cr.setReference(temp.getUrl());
                    cr.delete(MediaType.APPLICATION_JSON);

                    collectUsers();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No User Selected To Delete");
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void deleteBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBButtonActionPerformed
        if (broadcastTable.getSelectedRow() != -1) {
            Broadcast temp = broadcastArray.get(broadcastTable.getSelectedRow());
            int result = JOptionPane.showConfirmDialog(null, "Are you sure you wish to delete this Broadcast?", "Delete Broadcast?", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                cr.setReference(temp.getUrl());
                cr.delete(MediaType.APPLICATION_JSON);

                collectBroadcasts();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No Broadcast Selected To Delete");
        }
    }//GEN-LAST:event_deleteBButtonActionPerformed

    private void newBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBButtonActionPerformed
        Broadcast temp = new Broadcast();
        BroadcastPanel panel = new BroadcastPanel();
        int result = JOptionPane.showConfirmDialog(null, panel,
                "Please Enter Broadcast Details", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            temp.setContent(panel.getContentArea().getText());
            int twitterInt = (panel.getTwitterButton().isSelected()) ? 1 : 0;
            int emailInt = (panel.getEmailButton().isSelected()) ? 1 : 0;
            ru.newBroadcast(temp, twitterInt, emailInt, cr, BASIC_URI);
            collectBroadcasts();
        }
    }//GEN-LAST:event_newBButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane adminTabs;
    private javax.swing.JPanel broadcastTab;
    private javax.swing.JTable broadcastTable;
    private javax.swing.JButton deleteBButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton newBButton;
    private javax.swing.JButton newButton;
    private javax.swing.JList profileList;
    private javax.swing.JPanel profileTab;
    private javax.swing.JPanel userTab;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
